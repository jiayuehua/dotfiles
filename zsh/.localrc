#!/usr/bin/zsh
# jiayuehua's zsh profile for general Linux/Unix
#
# Implementation notes:
#
# - Functions with name starts with '__' are considered 'private' and will be
#   unset at the end.
# - Functions with name starts with only one '_' are considered 'protected',
#   users can implement their own to override (via ~/.profiles.d).

# Find a file which name matches given pattern (ERE, case insensitive)

# "Protected" helper to decorate CWD used to setup PROMPT
function _source_control_cwd
{
  [[ $PWD != ${HOME}* ]] || { echo ${PWD/$HOME/\~}; return 0; }
  echo $PWD
}

function __main
{
  local fn

  for fn in \
    __init_completion \
    __setup_path \
    __setup_shell_options \
    __setup_environments \
    __setup_aliases \
    __setup_completions \
    __setup_dir_colors \
    __setup_ssh_agent \
    __setup_prompt \
    __setup_custom_profiles \
    ; do
  $fn; unset -f $fn
done
}

function __init_completion
{
  [[ ! -d ~/.zsh-completions ]] || fpath=(~/.zsh-completions/src $fpath)
  autoload -U compinit && compinit
}

function __prepend_path
{
  [[ :$PATH: == *:${1:?}:* ]] || PATH=$1:$PATH
}

function __setup_path
{
  local x

  # prepend paths
  for x in /sbin /usr/sbin /bin /usr/bin /usr/local/bin; do
    __prepend_path $x
  done

  # ~/bin takes precedence
  __prepend_path ~/bin

  export PATH
}

function __setup_shell_options
{
  set -o shwordsplit                  # ARG="foo bar"; $ARG => "foo" "bar"
  setopt prompt_subst
  setopt interactive_comments
  setopt nocase_glob
  setopt nocase_match 2>/dev/null     # does not work for zsh < 4.3
  setopt extended_history
  setopt hist_expire_dups_first
  setopt hist_ignore_dups
  setopt hist_ignore_space
  setopt hist_find_no_dups
  setopt hist_verify
  setopt share_history
  setopt auto_pushd
  setopt pushd_ignore_dups
  unsetopt nomatch
  unsetopt correct
  bindkey -e                          # Reclaim C-a, C-e, C-r, M-., etc.
  ! test -t 0 || stty stop undef      # Make 'C-s' to do fwd-i-search
  bindkey "^U" backward-kill-line     # Keep the same behavior as in bash
}

function __setup_environments
{
  export HISTFILE=~/.zhistory         # Prevent from ~/.zsh<tab> completion
  export HISTSIZE=10000
  export SAVEHIST=10000
  export EDITOR=vim

  # Locale (LC_*) matters for ls and sort on Linux, see also
  # www.gnu.org/software/coreutils/faq/#Sort-does-not-sort-in-normal-order_0021
  #
  [[ $(uname -s) != Linux ]] || export LC_COLLATE=C
}

function __setup_completions
{
  zstyle ':completion:*' menu yes select
  zstyle ':completion:*' users off
  zmodload zsh/complist
  bindkey -M menuselect '^M' .accept-line     # <Enter> only once to accept
  ZLE_REMOVE_SUFFIX_CHARS=                    # no space after, zshparam(1)

  # Fix default host completion
  __hosts=($(sed -ne 's/[, ].*//p' ~/.ssh/known_hosts* 2>/dev/null))
  zstyle ':completion:*:hosts' hosts $__hosts
}

function __setup_aliases
{

  alias cd..='cd ..'
  # Skip system wide vimrc to reduce startup time
  ! type vim >& /dev/null || alias vi='vim -Xn -u ~/.vimrc'
  ! type ag >& /dev/null || alias ag='command ag --nogroup'

  alias g++='g++ --std=c++1z'
  alias clang++='clang++ --std=c++1z'
  #alias rcp='rsync -avzP'
  #alias rsync='rsync -avzP'

}

function __setup_dir_colors
{
  local prog=dircolors

  [[ $(uname -s) != Darwin ]] || prog=gdircolors
  if type $prog >& /dev/null && [[ -f ~/.dircolors ]]; then
    eval $($prog -b ~/.dircolors)
  fi
}

function __has_ssh_key
{
  [[ -f ~/.ssh/$USER.key ]] || ls ~/.ssh/id_?sa >& /dev/null
}

function __load_ssh_key
{
  [[ ! -f "${1:?}" ]] || ssh-add -L | grep -qw "$1" || ssh-add "$1"
}

# ssh-add -l exits code 2 when unable to connect to the agent
function __setup_ssh_agent
{
  local rc=~/.ssh-agent.rc

  # Skip in typical corporation environment
  [[ -z $SK_SIGNING_PLUGIN ]] || return 0

  __has_ssh_key || return 0
  [[ ! -f $rc ]] || source $rc
  if [[ $(ssh-add -l >& /dev/null; echo $?) == 2 ]]; then
    print -P "%{\e[31m%}Starting a new ssh-agent process...%{\e[0m%}" >&2
    rm -f ~/.ssh-agent.sock
    ssh-agent -s -a ~/.ssh-agent.sock | sed '/^echo/d' > $rc
    source $rc
  fi

  __load_ssh_key ~/.ssh/$USER.key
  __load_ssh_key ~/.ssh/id_rsa
  __load_ssh_key ~/.ssh/id_dsa
}

# Fancy PROMPT, prompt exit status of last command, currenet time, hostname,
# time, cwd, git status and branch, also prompt the '%' in reverse color when
# we have background jobs.
#
function __setup_prompt
{ 
  PS1="%~$ "  
}
function __setup_promptImpl
{
  local _DR=$'%{\e[31m%}'       # red
  local _DG=$'%{\e[32m%}'       # green
  local _DY=$'%{\e[33m%}'       # yellow
  local _DB=$'%{\e[34m%}'       # blue
  local _DM=$'%{\e[35m%}'       # magenta
  local _DC=$'%{\e[36m%}'       # cyan
  local _RV=$'%{\e[7m%}'        # reverse
  local _NC=$'%{\e[0m%}'        # reset color

  PROMPT=""

  # Detect whether this box has ssh keys, distinguish hostname color and setup
  # ssh-agent related environment accordingly
  #
  #if __has_ssh_key; then
  ## I am on my own machine, try load ssh-agent related environments
  #PROMPT+="${_DB}"                                # blue hostname
  #else
  ## Otherwise assume I am on other's box, highlight hostname in magenta
  #PROMPT+="${_DM}"                                # magenta hostname
  #fi

  # Highlight hostname in reverse green if inside a container
  #if [[ -n $container_uuid ]] || [[ -f /.dockerenv ]]; then
  #PROMPT+="${_RV}${_DG}"
  #fi
  #PROMPT+="$(hostname -f | cut -d. -f1-2)"            # 2 hostname components
  PROMPT+="${_NC}\$(_source_control_cwd)"      # yellow cwd
  #PROMPT+="${_NC}\$(_source_control_info)"            # source control info
  #PROMPT+="${_DC}"                            # cyan wrap char, NL
  #PROMPT+="\$([[ -z \$(jobs) ]] || echo '${_RV}')"    # reverse bg job
  #PROMPT+="%#${_NC} "                                 # % or #
  PROMPT+="$ ${_NC}"                                 # % or #
}

# Load custom settings from ~/.profile.d/*.sh, typical settings are
# docker-machine env, GOPATH, customized PATH etc.
#
function __setup_custom_profiles
{
  local p

  ls ~/.profiles.d/*.sh >& /dev/null || return 0

  for p in ~/.profiles.d/*.sh; do
    source $p
  done
}
#source /home/rob/antigen.zsh

##########################################################
##########################################################
#
source /usr/share/zsh-antigen/antigen.zsh
antigen init /home/rob/.antigenrc
#
# # 保存更改
 antigen apply
#############################
#############################

########################################################################
# Setup everything and unset the rest "private" functions
########################################################################

# vim:set et sts=4 sw=4 ft=zsh:
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
#export ZSH=/home/rob/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
#ZSH_THEME="robbyrussell"

# Set list of themes to load
# Setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
#plugins=(
##git
#)

#source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
__main

unset -f __prepend_path __has_ssh_key __load_ssh_key __main
fancy-ctrl-z () {
if [[ $#BUFFER -eq 0 ]]; then
  BUFFER="fg"
  zle accept-line
else
  zle push-input
  zle clear-screen
fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

